name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.version.outputs.version }}
        PREV_TAG=${{ steps.version.outputs.prev_tag }}
        
        echo "## 🔥 BurnDevice $VERSION" > CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "### What's New" >> CHANGELOG.tmp
        
        if [ -n "$PREV_TAG" ]; then
          echo "**Full Changelog**: [\`$PREV_TAG...$VERSION\`](https://github.com/${{ github.repository }}/compare/$PREV_TAG...$VERSION)" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "### Changes" >> CHANGELOG.tmp
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.tmp
        else
          echo "- 🎉 Initial release of BurnDevice" >> CHANGELOG.tmp
          echo "- ⚡ High-performance device burning tool" >> CHANGELOG.tmp
          echo "- 🔧 Support for multiple device types" >> CHANGELOG.tmp
          echo "- 🌐 gRPC API support" >> CHANGELOG.tmp
          echo "- 🤖 AI-powered destruction scenarios" >> CHANGELOG.tmp
          echo "- 🛡️ Safety controls and validation" >> CHANGELOG.tmp
        fi
        
        echo "" >> CHANGELOG.tmp
        echo "### 📦 Installation" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### Download Binary" >> CHANGELOG.tmp
        echo "Download the appropriate binary for your platform from the Assets below." >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### Build from Source" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "git clone https://github.com/${{ github.repository }}.git" >> CHANGELOG.tmp
        echo "cd BurnDevice" >> CHANGELOG.tmp
        echo "nix develop  # or ensure Go 1.24+ is installed" >> CHANGELOG.tmp
        echo "make build" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### Docker" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "docker run --rm -it ghcr.io/burndevice/burndevice:${{ steps.version.outputs.version_number }}" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "### 🚀 Quick Start" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "# Check version" >> CHANGELOG.tmp
        echo "./burndevice --version" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "# Start server" >> CHANGELOG.tmp
        echo "./burndevice server --config config.yaml" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "# Run client" >> CHANGELOG.tmp
        echo "./burndevice client --help" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "### ⚠️ Important Notice" >> CHANGELOG.tmp
        echo "**This tool is intended for authorized testing environments only.**" >> CHANGELOG.tmp
        echo "Do not use in production systems without proper authorization." >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "---" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "📋 For detailed documentation, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)" >> CHANGELOG.tmp

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "🔥 BurnDevice ${{ steps.version.outputs.version }}"
        body_path: CHANGELOG.tmp
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        make_latest: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Output info
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} created successfully!"
        echo "📋 Release page: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
        echo "⏰ Waiting for Make command to upload release assets..." 