name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.version.outputs.version }}
        PREV_TAG=${{ steps.version.outputs.prev_tag }}
        
        echo "## 🔥 BurnDevice $VERSION" > CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "### 📈 改进" >> CHANGELOG.tmp
        
        if [ -n "$PREV_TAG" ]; then
          echo "**完整更新日志**: [\`$PREV_TAG...$VERSION\`](https://github.com/${{ github.repository }}/compare/$PREV_TAG...$VERSION)" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "### 🔄 提交记录" >> CHANGELOG.tmp
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.tmp
        else
          echo "- 🎉 首次发布" >> CHANGELOG.tmp
          echo "- ⚡ 高性能设备烧录工具" >> CHANGELOG.tmp
          echo "- 🔧 支持多种设备类型" >> CHANGELOG.tmp
          echo "- 🌐 gRPC API 支持" >> CHANGELOG.tmp
          echo "- 🤖 AI 辅助功能" >> CHANGELOG.tmp
        fi
        
        echo "" >> CHANGELOG.tmp
        echo "### 📦 安装方式" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### 直接下载" >> CHANGELOG.tmp
        echo "从下方 Assets 下载对应平台的二进制文件" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### 使用脚本安装" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "#### Docker" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "docker run --rm -it burndevice/burndevice:${{ steps.version.outputs.version_number }}" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "### 🔍 验证安装" >> CHANGELOG.tmp
        echo "\`\`\`bash" >> CHANGELOG.tmp
        echo "burndevice --version" >> CHANGELOG.tmp
        echo "\`\`\`" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "---" >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "**注意**: 发布包正在上传中，请稍等片刻..." >> CHANGELOG.tmp

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "🔥 BurnDevice ${{ steps.version.outputs.version }}"
        body_path: CHANGELOG.tmp
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        make_latest: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Output info
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} created successfully!"
        echo "📋 Release page: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
        echo "⏰ Waiting for Make command to upload release assets..." 