name: 🤖 Auto-merge Dependabot PRs

on:
  # 在 CI 工作流完成后触发，包括 PR 分支
  workflow_run:
    workflows: ["🔥 BurnDevice CI"]
    types: [completed]
    # 移除 branches 限制，让它可以响应所有分支的 CI
  
  # 也在 PR 的状态检查完成时触发
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  auto-merge:
    name: 🔄 Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    # 只处理成功的工作流运行
    if: |
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run != null) ||
      (github.event.check_suite.conclusion == 'success' && github.event.check_suite != null)
    
    steps:
    - name: 🔍 Find associated PR
      id: find-pr
      uses: actions/github-script@v7
      with:
        script: |
          let head_sha = null;
          
          // 从不同事件类型获取 SHA
          if (context.eventName === 'workflow_run' && context.payload.workflow_run) {
            head_sha = context.payload.workflow_run.head_sha;
            console.log(`📋 Workflow run event - SHA: ${head_sha}`);
          } else if (context.eventName === 'check_suite' && context.payload.check_suite) {
            head_sha = context.payload.check_suite.head_sha;
            console.log(`✅ Check suite event - SHA: ${head_sha}`);
          }
          
          if (!head_sha) {
            console.log('❌ Could not determine head SHA from event');
            return { found: false, reason: 'No head SHA found' };
          }
          
          console.log(`🔍 Looking for PR with head SHA: ${head_sha}`);
          
          // 查找对应的 PR
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          console.log(`📊 Found ${prs.length} open PRs`);
          
          const pr = prs.find(pr => pr.head.sha === head_sha);
          
          if (!pr) {
            console.log('❌ No open PR found for this SHA');
            console.log('🔍 Available PR SHAs:');
            prs.forEach(p => console.log(`  - PR #${p.number}: ${p.head.sha} (${p.user.login})`));
            return { found: false, reason: 'No matching PR found' };
          }
          
          // 检查是否是 Dependabot PR
          if (pr.user.login !== 'dependabot[bot]') {
            console.log(`❌ PR is not from Dependabot (author: ${pr.user.login})`);
            return { found: false, reason: 'Not a Dependabot PR' };
          }
          
          console.log(`✅ Found Dependabot PR #${pr.number}: ${pr.title}`);
          return {
            found: true,
            number: pr.number,
            title: pr.title,
            mergeable: pr.mergeable,
            mergeable_state: pr.mergeable_state
          };

    - name: 🔍 Fetch PR metadata
      id: metadata
      if: steps.find-pr.outputs.result && fromJSON(steps.find-pr.outputs.result).found
      uses: dependabot/fetch-metadata@v2
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: ✅ Verify PR is ready to merge
      id: check-mergeable
      if: steps.find-pr.outputs.result && fromJSON(steps.find-pr.outputs.result).found
      uses: actions/github-script@v7
      with:
        script: |
          const pr_info = JSON.parse(`${{ steps.find-pr.outputs.result }}`);
          const pr_number = pr_info.number;
          
          // 获取最新的 PR 状态
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr_number
          });
          
          console.log(`📊 PR #${pr_number} status:`);
          console.log(`  - State: ${pr.state}`);
          console.log(`  - Mergeable: ${pr.mergeable}`);
          console.log(`  - Mergeable state: ${pr.mergeable_state}`);
          
          // 检查是否可以合并
          const canMerge = pr.state === 'open' && 
                          pr.mergeable === true && 
                          pr.mergeable_state === 'clean';
          
          console.log(`🎯 Can merge: ${canMerge}`);
          
          return {
            can_merge: canMerge,
            pr_number: pr_number,
            state: pr.state,
            mergeable: pr.mergeable,
            mergeable_state: pr.mergeable_state
          };

    - name: 🚀 Auto-merge safe updates
      if: |
        steps.check-mergeable.outputs.result && 
        fromJSON(steps.check-mergeable.outputs.result).can_merge &&
        (steps.metadata.outputs.update-type == 'version-update:semver-patch' ||
         steps.metadata.outputs.update-type == 'version-update:semver-minor')
      run: |
        PR_NUMBER="${{ fromJSON(steps.check-mergeable.outputs.result).pr_number }}"
        
        echo "🎉 All checks passed! Proceeding with auto-merge..."
        echo "✅ Safe update detected: ${{ steps.metadata.outputs.update-type }}"
        echo "📦 Package: ${{ steps.metadata.outputs.dependency-names }}"
        echo "🔄 Version: ${{ steps.metadata.outputs.previous-version }} → ${{ steps.metadata.outputs.new-version }}"
        
        # 合并 PR
        gh pr merge ${PR_NUMBER} --squash --delete-branch
        
        echo "🎉 PR #${PR_NUMBER} merged successfully and branch deleted!"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🛡️ Auto-merge security updates
      if: |
        steps.check-mergeable.outputs.result && 
        fromJSON(steps.check-mergeable.outputs.result).can_merge &&
        (contains(steps.metadata.outputs.update-type, 'security') ||
         contains(steps.metadata.outputs.dependency-names, 'security'))
      run: |
        PR_NUMBER="${{ fromJSON(steps.check-mergeable.outputs.result).pr_number }}"
        
        echo "🛡️ Security update detected - merging immediately!"
        echo "📦 Package: ${{ steps.metadata.outputs.dependency-names }}"
        
        # 合并安全更新
        gh pr merge ${PR_NUMBER} --squash --delete-branch
        
        echo "🎉 Security update merged and branch deleted!"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📝 Comment on major updates
      if: |
        steps.metadata.outputs.update-type == 'version-update:semver-major' &&
        steps.check-mergeable.outputs.result
      run: |
        PR_NUMBER="${{ fromJSON(steps.check-mergeable.outputs.result).pr_number }}"
        CAN_MERGE="${{ fromJSON(steps.check-mergeable.outputs.result).can_merge }}"
        
        if [ "$CAN_MERGE" = "true" ]; then
          STATUS_MSG="✅ **All CI checks passed!** Ready for manual review and merge."
          ACTION_MSG="This PR is ready to merge after manual review."
        else
          STATUS_MSG="❌ **PR is not ready to merge.** Please check CI status and conflicts."
          ACTION_MSG="Fix any issues before proceeding with merge."
        fi
        
        gh pr comment ${PR_NUMBER} --body "🚨 **Major version update detected!**
        
        📦 **Package**: ${{ steps.metadata.outputs.dependency-names }}
        🔄 **Update**: ${{ steps.metadata.outputs.previous-version }} → ${{ steps.metadata.outputs.new-version }}
        
        ${STATUS_MSG}
        
        **⚠️ Manual review required for major updates:**
        - Check breaking changes in changelog  
        - Verify compatibility with existing code
        - Review test coverage for new features
        - Consider impact on API consumers
        
        **${ACTION_MSG}**
        
        **To merge after review:**
        \`\`\`bash
        gh pr merge ${PR_NUMBER} --squash --delete-branch
        \`\`\`"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: ❌ Comment on unmergeable PRs
      if: |
        steps.find-pr.outputs.result && 
        fromJSON(steps.find-pr.outputs.result).found &&
        steps.check-mergeable.outputs.result &&
        !fromJSON(steps.check-mergeable.outputs.result).can_merge &&
        steps.metadata.outputs.update-type != 'version-update:semver-major'
      run: |
        PR_NUMBER="${{ fromJSON(steps.check-mergeable.outputs.result).pr_number }}"
        MERGEABLE_STATE="${{ fromJSON(steps.check-mergeable.outputs.result).mergeable_state }}"
        
        gh pr comment ${PR_NUMBER} --body "❌ **Auto-merge blocked - PR not ready**
        
        📦 **Package**: ${{ steps.metadata.outputs.dependency-names || 'Unknown' }}
        🔄 **Update Type**: ${{ steps.metadata.outputs.update-type || 'Unknown' }}
        📊 **Status**: ${MERGEABLE_STATE}
        
        **This PR cannot be auto-merged because:**
        - CI checks may still be running or have failed
        - There may be merge conflicts
        - The PR may be in draft state
        
        **This PR will be auto-merged once it becomes mergeable.** ✨
        
        **Common fixes:**
        1. Wait for CI checks to complete
        2. Resolve merge conflicts: \`@dependabot rebase\`
        3. Check if PR is in draft mode
        
        **Manual merge when ready:**
        \`\`\`bash
        gh pr merge ${PR_NUMBER} --squash --delete-branch
        \`\`\`"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Debug information
      if: steps.find-pr.outputs.result && !fromJSON(steps.find-pr.outputs.result).found
      run: |
        echo "🐛 Debug: Auto-merge workflow triggered but no Dependabot PR found"
        echo "📋 Event: ${{ github.event_name }}"
        echo "🔍 Reason: ${{ fromJSON(steps.find-pr.outputs.result).reason }}"
        
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "📊 Workflow run details:"
          echo "  - Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "  - Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "  - Head branch: ${{ github.event.workflow_run.head_branch }}"
        elif [ "${{ github.event_name }}" = "check_suite" ]; then
          echo "📊 Check suite details:"
          echo "  - Conclusion: ${{ github.event.check_suite.conclusion }}"
          echo "  - Head SHA: ${{ github.event.check_suite.head_sha }}"
          echo "  - Head branch: ${{ github.event.check_suite.head_branch }}"
        fi
