// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: burndevice/v1/service.proto

package burndevicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BurnDeviceService_ExecuteDestruction_FullMethodName     = "/burndevice.v1.BurnDeviceService/ExecuteDestruction"
	BurnDeviceService_GetSystemInfo_FullMethodName          = "/burndevice.v1.BurnDeviceService/GetSystemInfo"
	BurnDeviceService_GenerateAttackScenario_FullMethodName = "/burndevice.v1.BurnDeviceService/GenerateAttackScenario"
	BurnDeviceService_StreamDestruction_FullMethodName      = "/burndevice.v1.BurnDeviceService/StreamDestruction"
)

// BurnDeviceServiceClient is the client API for BurnDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BurnDevice service provides destructive testing capabilities
type BurnDeviceServiceClient interface {
	// Execute a destructive test scenario
	ExecuteDestruction(ctx context.Context, in *ExecuteDestructionRequest, opts ...grpc.CallOption) (*ExecuteDestructionResponse, error)
	// Get system information before destruction
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// Generate AI-powered attack scenarios
	GenerateAttackScenario(ctx context.Context, in *GenerateAttackScenarioRequest, opts ...grpc.CallOption) (*GenerateAttackScenarioResponse, error)
	// Stream destruction progress
	StreamDestruction(ctx context.Context, in *StreamDestructionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDestructionResponse], error)
}

type burnDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBurnDeviceServiceClient(cc grpc.ClientConnInterface) BurnDeviceServiceClient {
	return &burnDeviceServiceClient{cc}
}

func (c *burnDeviceServiceClient) ExecuteDestruction(ctx context.Context, in *ExecuteDestructionRequest, opts ...grpc.CallOption) (*ExecuteDestructionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteDestructionResponse)
	err := c.cc.Invoke(ctx, BurnDeviceService_ExecuteDestruction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *burnDeviceServiceClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, BurnDeviceService_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *burnDeviceServiceClient) GenerateAttackScenario(ctx context.Context, in *GenerateAttackScenarioRequest, opts ...grpc.CallOption) (*GenerateAttackScenarioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAttackScenarioResponse)
	err := c.cc.Invoke(ctx, BurnDeviceService_GenerateAttackScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *burnDeviceServiceClient) StreamDestruction(ctx context.Context, in *StreamDestructionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDestructionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BurnDeviceService_ServiceDesc.Streams[0], BurnDeviceService_StreamDestruction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDestructionRequest, StreamDestructionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BurnDeviceService_StreamDestructionClient = grpc.ServerStreamingClient[StreamDestructionResponse]

// BurnDeviceServiceServer is the server API for BurnDeviceService service.
// All implementations must embed UnimplementedBurnDeviceServiceServer
// for forward compatibility.
//
// BurnDevice service provides destructive testing capabilities
type BurnDeviceServiceServer interface {
	// Execute a destructive test scenario
	ExecuteDestruction(context.Context, *ExecuteDestructionRequest) (*ExecuteDestructionResponse, error)
	// Get system information before destruction
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// Generate AI-powered attack scenarios
	GenerateAttackScenario(context.Context, *GenerateAttackScenarioRequest) (*GenerateAttackScenarioResponse, error)
	// Stream destruction progress
	StreamDestruction(*StreamDestructionRequest, grpc.ServerStreamingServer[StreamDestructionResponse]) error
	mustEmbedUnimplementedBurnDeviceServiceServer()
}

// UnimplementedBurnDeviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBurnDeviceServiceServer struct{}

func (UnimplementedBurnDeviceServiceServer) ExecuteDestruction(context.Context, *ExecuteDestructionRequest) (*ExecuteDestructionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDestruction not implemented")
}
func (UnimplementedBurnDeviceServiceServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedBurnDeviceServiceServer) GenerateAttackScenario(context.Context, *GenerateAttackScenarioRequest) (*GenerateAttackScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAttackScenario not implemented")
}
func (UnimplementedBurnDeviceServiceServer) StreamDestruction(*StreamDestructionRequest, grpc.ServerStreamingServer[StreamDestructionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDestruction not implemented")
}
func (UnimplementedBurnDeviceServiceServer) mustEmbedUnimplementedBurnDeviceServiceServer() {}
func (UnimplementedBurnDeviceServiceServer) testEmbeddedByValue()                           {}

// UnsafeBurnDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BurnDeviceServiceServer will
// result in compilation errors.
type UnsafeBurnDeviceServiceServer interface {
	mustEmbedUnimplementedBurnDeviceServiceServer()
}

func RegisterBurnDeviceServiceServer(s grpc.ServiceRegistrar, srv BurnDeviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedBurnDeviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BurnDeviceService_ServiceDesc, srv)
}

func _BurnDeviceService_ExecuteDestruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteDestructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BurnDeviceServiceServer).ExecuteDestruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BurnDeviceService_ExecuteDestruction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BurnDeviceServiceServer).ExecuteDestruction(ctx, req.(*ExecuteDestructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BurnDeviceService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BurnDeviceServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BurnDeviceService_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BurnDeviceServiceServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BurnDeviceService_GenerateAttackScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAttackScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BurnDeviceServiceServer).GenerateAttackScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BurnDeviceService_GenerateAttackScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BurnDeviceServiceServer).GenerateAttackScenario(ctx, req.(*GenerateAttackScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BurnDeviceService_StreamDestruction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDestructionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BurnDeviceServiceServer).StreamDestruction(m, &grpc.GenericServerStream[StreamDestructionRequest, StreamDestructionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BurnDeviceService_StreamDestructionServer = grpc.ServerStreamingServer[StreamDestructionResponse]

// BurnDeviceService_ServiceDesc is the grpc.ServiceDesc for BurnDeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BurnDeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "burndevice.v1.BurnDeviceService",
	HandlerType: (*BurnDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteDestruction",
			Handler:    _BurnDeviceService_ExecuteDestruction_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _BurnDeviceService_GetSystemInfo_Handler,
		},
		{
			MethodName: "GenerateAttackScenario",
			Handler:    _BurnDeviceService_GenerateAttackScenario_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDestruction",
			Handler:       _BurnDeviceService_StreamDestruction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "burndevice/v1/service.proto",
}
